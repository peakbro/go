// Copyright 2013 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// 包 encoding 定义了其他包的共享接口，这些包将数据在字节级表示形式和文本表示形式相互转换。
// encoding/gob、encoding/json、encoding/xml三个包都会检查使用这些接口。
// 因此，只要实现了这些接口一次，就可以在多个包里使用。
// 标准包内建类型 time.Time和 net.IP都实现了这些接口。
// 接口是成对的，分别产生和还原编码后的数据。
package encoding

// 实现了 BinaryMarshaler 接口的类型可以将自身序列化为二进制形式。
//
// MarshalBinary 将接收到的数据编码为二进制形式并返回结果。
type BinaryMarshaler interface {
	MarshalBinary() (data []byte, err error)
}

// BinaryUnmarshaler is the interface implemented by an object that can
// unmarshal a binary representation of itself.
//
// UnmarshalBinary must be able to decode the form generated by MarshalBinary.
// UnmarshalBinary must copy the data if it wishes to retain the data
// after returning.
type BinaryUnmarshaler interface {
	UnmarshalBinary(data []byte) error
}

// TextMarshaler is the interface implemented by an object that can
// marshal itself into a textual form.
//
// MarshalText encodes the receiver into UTF-8-encoded text and returns the result.
type TextMarshaler interface {
	MarshalText() (text []byte, err error)
}

// TextUnmarshaler is the interface implemented by an object that can
// unmarshal a textual representation of itself.
//
// UnmarshalText must be able to decode the form generated by MarshalText.
// UnmarshalText must copy the text if it wishes to retain the text
// after returning.
type TextUnmarshaler interface {
	UnmarshalText(text []byte) error
}
